#!/usr/bin/env node
const {signatures, traverse} = require("@webassemblyjs/ast");
const { decode } = require("@webassemblyjs/wasm-parser");
var argv = require('yargs')
    .usage('Usage: $0 -o [output file] -p [path to wasm]')
    .alias("p","path")
    .alias("o","output_file")
    .demandOption(['p','o'])
    .argv;
const fs = require("fs");
const path = "./../../../bin/matmachjs.wasm"; 
const decoderOpts = {};

const ast = decode(fs.readFileSync(argv.p), decoderOpts);

traverse(ast, {
    Module(path) {
    //   console.log(path.node);
      let interface = getFunctions(path.node).reduce((acc, func)=>{
            let paramIndex = 0;
            const parameters = func.signature.params.map((param)=>{const tsParam = `${param.valtype}_${paramIndex}:number`;paramIndex++;return tsParam;}).join(", ");
            acc += `\t${func.name}(${parameters}):number;\n\n`;
            return acc;
      },"export interface MatWably{\n");
      interface+="}\n";
      fs.writeFileSync(argv.o,interface);
    }
  });

function getFunctions(node){
     return node.fields.filter(field => field.type === 'ModuleExport'&& field.descr.exportType === 'Func')
        .reduce((acc, type)=>{
            acc.push(node.fields.filter(field => field.type === 'Func')
            .map((func)=>{
                if( Number(func.name.value.substring(5)) === type.descr.id.value){
                    acc.push({signature: func.signature, name: type.name});
                    return acc;
                }
            })[0]);
            return acc;
    },[]).filter(val=> typeof val !== "undefined");
}